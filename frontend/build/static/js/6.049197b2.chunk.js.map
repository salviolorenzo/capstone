{"version":3,"sources":["Components/Tiles/Calendar.js"],"names":["moment","locale","localizer","BigCalendar","momentLocalizer","allViews","Object","keys","Views","map","k","Calendar","props","_this","_Users_salviolorenzo_Desktop_digitalcrafts_projects_finalProject_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_salviolorenzo_Desktop_digitalcrafts_projects_finalProject_frontend_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_salviolorenzo_Desktop_digitalcrafts_projects_finalProject_frontend_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","view","date","Date","width","header","Modal","setAppElement","allDay","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","type","name","value","start","onChange","handleStartTime","end","handleEndTime","_this2","className","onClick","setState","react_modal__WEBPACK_IMPORTED_MODULE_9___default","isOpen","modalIsOpen","onAfterOpen","afterOpenModal","onRequestClose","closeModal","contentLabel","selectedEvent","title","onSubmit","event","handleNewEvent","placeholder","term","handleTitleChange","checked","changeBox","isAllDay","desc","handleDescChange","handleDelete","react_big_calendar__WEBPACK_IMPORTED_MODULE_6___default","selectable","style","height","toolbar","step","events","onSelectEvent","displayEvent","onSelectSlot","onSlotChange","views","onView","scrollToTime","onNavigate","timeslots","Component"],"mappings":"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","file":"static/js/6.049197b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport BigCalendar from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport Modal from 'react-modal';\n\nmoment.locale('en');\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst allViews = Object.keys(BigCalendar.Views).map(k => BigCalendar.Views[k]);\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      view: 'day',\n      date: new Date(),\n      width: '100%',\n      header: `Today's Agenda`\n    };\n  }\n\n  componentDidMount() {\n    Modal.setAppElement('body');\n  }\n\n  isAllDay(allDay) {\n    if (allDay) {\n      return null;\n    } else {\n      return (\n        <>\n          <input\n            type=\"text\"\n            name=\"start\"\n            value={this.props.start}\n            onChange={this.props.handleStartTime}\n          />\n          <input\n            type=\"text\"\n            name=\"end\"\n            value={this.props.end}\n            onChange={this.props.handleEndTime}\n          />\n        </>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"tile calendarTile\">\n        <h3>{this.state.header}</h3>\n        <div className=\"calendarHeader\">\n          <button\n            className=\"calendarBtn\"\n            onClick={() =>\n              this.setState({ view: 'day', header: \"Today's Agenda\" })\n            }\n          >\n            Day\n          </button>\n          <button\n            className=\"calendarBtn\"\n            onClick={() => this.setState({ view: 'week', header: 'This Week' })}\n          >\n            Week\n          </button>\n          <button\n            className=\"calendarBtn\"\n            onClick={() =>\n              this.setState({ view: 'month', header: 'This Month' })\n            }\n          >\n            Month\n          </button>\n        </div>\n        <Modal\n          isOpen={this.props.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          contentLabel=\"Example Modal\"\n        >\n          <button onClick={this.props.closeModal} className=\"closeBtn\">\n            X\n          </button>\n          <div className=\"modalText\">\n            <h2>{this.props.selectedEvent.title}</h2>\n            <p>{this.props.selectedEvent.start}</p>\n            <p>{this.props.selectedEvent.end}</p>\n          </div>\n          <form\n            className=\"modalForm\"\n            onSubmit={event => {\n              this.props.handleNewEvent(event);\n            }}\n          >\n            <input\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Event Title\"\n              value={this.props.term}\n              onChange={this.props.handleTitleChange}\n            />\n            <label>\n              <input\n                type=\"checkbox\"\n                name=\"allDay\"\n                value={this.props.allDay}\n                checked={this.props.allDay}\n                onChange={this.props.changeBox}\n              />\n              All Day\n            </label>\n            {this.isAllDay(this.props.allDay)}\n            <textarea\n              name=\"eventDesc\"\n              placeholder=\"Event Description\"\n              value={this.props.desc}\n              onChange={this.props.handleDescChange}\n            />\n            <button type=\"submit\" value=\"Save\" className=\"saveBtn\">\n              Save\n            </button>\n          </form>\n          <form onSubmit={this.props.handleDelete}>\n            <button className=\"modalDelete\" type=\"submit\" value=\"Delete Event\">\n              Delete Event\n            </button>\n          </form>\n        </Modal>\n\n        <BigCalendar\n          selectable={true}\n          style={{ height: 500, width: this.state.width }}\n          toolbar={false}\n          // events={events}\n          step={60}\n          localizer={localizer}\n          events={this.props.events}\n          onSelectEvent={event => {\n            this.props.displayEvent(event);\n          }}\n          onSelectSlot={event => {\n            this.props.onSlotChange(event);\n          }}\n          view={this.state.view}\n          views={allViews}\n          onView={() => {}}\n          date={this.state.date}\n          scrollToTime={this.state.date}\n          onNavigate={date => this.setState({ date })}\n          timeslots={1}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Calendar;\n"],"sourceRoot":""}